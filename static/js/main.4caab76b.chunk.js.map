{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/ErrorType.ts","api/comments.ts","customHooks/useFormFields.ts","customHooks/useFormValidate.ts","components/NewCommentForm.tsx","components/Notification.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","_ref","posts","selectedPost","onOpenSidebar","_jsxs","children","_jsx","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorType","client","createComment","deleteComment","commentId","concat","ActionType","initialState","name","email","comment","reducer","state","action","updated_input","_objectSpread","_defineProperty","key","value","cleared_form","nameIsValid","emailIsValid","commentIsValid","created_error","NewCommentForm","postId","onSetErrorType","onSetFromIsOpen","onSetIsError","onSetComments","_useFormFields","_useReducer","useReducer","_useReducer2","_slicedToArray","dispatch","setName","setEmail","setComment","clearForm","useFormFields","_useFormFields2","formFieldsState","_useFormFields2$","_useState","useState","_useState2","isLoading","setIsLoading","_useFormValidate","setNameIsValid","setEmailIsValid","setCommentIsValid","useFormValidate","_useFormValidate2","formErrorState","_useFormValidate2$","handleCreateComment","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newComment","wrap","_context","prev","next","sent","prevComments","_toConsumableArray","t0","onCommentsLoad","finish","stop","_x","apply","onSubmit","event","preventDefault","form","target","formData","FormData","commentData","Object","fromEntries","entries","trimmedValues","trim","validateForm","htmlFor","placeholder","onChange","Notification","errorType","ErrorNoPosts","noPosts","errorMessage","NoPostsYet","PostsLoadingError","onPostsLoad","CommentsError","PostDetails","setErrorType","comments","setComments","_useState3","_useState4","isError","setIsError","_useState5","_useState6","_useState7","_useState8","formIsOpen","setFormIsOpen","handleLoadComments","commentsFromServer","useEffect","handleDeleteComment","_ref3","_callee2","_context2","filter","_Fragment","href","UserSelector","users","onLoadPosts","isActive","setIsActive","role","user","userId","getUserPosts","App","setUsers","userPosts","setUserPosts","setSelectedPost","_useState9","_useState10","userIsSelected","setUserIsSelected","_useState11","_useState12","sidebarIsOpen","setSidebarIsOpen","_useState13","none","_useState14","usersFromServer","handleLoadPosts","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4caab76b.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  onOpenSidebar: (post: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  onOpenSidebar,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr\n            key={post.id}\n            data-cy=\"Post\"\n          >\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  { 'is-light': selectedPost !== post },\n                )}\n                onClick={() => onOpenSidebar(post)}\n              >\n                {selectedPost !== post\n                  ? 'Open'\n                  : 'Close'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorType {\n  none,\n  noPosts,\n  onPostsLoad,\n  onCommentsLoad,\n}\n","import { Comment, CommentPostData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: CommentPostData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import { useReducer } from 'react';\n\nenum ActionType {\n  'updated_input',\n  'cleared_form',\n}\n\ntype Action = {\n  type: ActionType.updated_input;\n  key: 'name' | 'email' | 'comment';\n  value: string;\n} | {\n  type: ActionType.cleared_form;\n};\n\ntype State = {\n  name: string;\n  email: string;\n  comment: string;\n};\n\ntype Handlers = {\n  setName: (value: string) => void;\n  setEmail: (value: string) => void;\n  setComment: (value: string) => void;\n  clearForm: () => void;\n};\n\nconst initialState = {\n  name: '',\n  email: '',\n  comment: '',\n};\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionType.updated_input:\n      return {\n        ...state,\n        [action.key]: action.value,\n      };\n\n    case ActionType.cleared_form:\n      return {\n        ...initialState,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useFormFields = (): [State, Handlers] => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const setName = (value: string) => {\n    dispatch({\n      type: ActionType.updated_input,\n      key: 'name',\n      value,\n    });\n  };\n\n  const setEmail = (value: string) => {\n    dispatch({\n      type: ActionType.updated_input,\n      key: 'email',\n      value,\n    });\n  };\n\n  const setComment = (value: string) => {\n    dispatch({\n      type: ActionType.updated_input,\n      key: 'comment',\n      value,\n    });\n  };\n\n  const clearForm = () => {\n    dispatch({\n      type: ActionType.cleared_form,\n    });\n  };\n\n  return [state, {\n    setName,\n    setEmail,\n    setComment,\n    clearForm,\n  }];\n};\n","import { useReducer } from 'react';\n\nenum ActionType {\n  'created_error',\n}\n\ntype Action = {\n  type: ActionType.created_error;\n  key: 'nameIsValid' | 'emailIsValid' | 'commentIsValid';\n  value: boolean;\n};\n\ntype State = {\n  nameIsValid: boolean;\n  emailIsValid: boolean;\n  commentIsValid: boolean;\n};\n\ntype Handlers = {\n  setNameIsValid: (value: boolean) => void;\n  setEmailIsValid: (value: boolean) => void;\n  setCommentIsValid: (value: boolean) => void;\n};\n\nconst initialState = {\n  nameIsValid: true,\n  emailIsValid: true,\n  commentIsValid: true,\n};\n\nconst reducer = (state: State, action: Action) => {\n  const { type, key, value } = action;\n\n  switch (type) {\n    case ActionType.created_error:\n      return {\n        ...state,\n        [key]: value,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useFormValidate = (): [State, Handlers] => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const setNameIsValid = (value: boolean) => {\n    dispatch({\n      type: ActionType.created_error,\n      key: 'nameIsValid',\n      value,\n    });\n  };\n\n  const setEmailIsValid = (value: boolean) => {\n    dispatch({\n      type: ActionType.created_error,\n      key: 'emailIsValid',\n      value,\n    });\n  };\n\n  const setCommentIsValid = (value: boolean) => {\n    dispatch({\n      type: ActionType.created_error,\n      key: 'commentIsValid',\n      value,\n    });\n  };\n\n  return [state, { setNameIsValid, setEmailIsValid, setCommentIsValid }];\n};\n","import React, {\n  useState,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport classNames from 'classnames';\n\nimport { Comment, CommentData } from '../types/Comment';\nimport { createComment } from '../api/comments';\nimport { ErrorType } from '../types/ErrorType';\n\nimport { useFormFields } from '../customHooks/useFormFields';\nimport { useFormValidate } from '../customHooks/useFormValidate';\n\ntype Props = {\n  postId: number;\n  onSetErrorType: (errorType: ErrorType) => void;\n  onSetFromIsOpen: (value: boolean) => void;\n  onSetIsError: (value: boolean) => void;\n  onSetComments: Dispatch<SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  onSetErrorType,\n  onSetFromIsOpen,\n  onSetIsError,\n  onSetComments,\n}) => {\n  const [formFieldsState, {\n    setName,\n    setEmail,\n    setComment,\n    clearForm,\n  }] = useFormFields();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [formErrorState, {\n    setNameIsValid,\n    setEmailIsValid,\n    setCommentIsValid,\n  }] = useFormValidate();\n\n  const handleCreateComment = async (data: CommentData) => {\n    const newComment = {\n      postId,\n      ...data,\n    };\n\n    try {\n      setIsLoading(true);\n\n      const comment = await createComment(newComment);\n\n      setComment('');\n      onSetComments((prevComments) => ([\n        ...prevComments,\n        comment,\n      ]));\n    } catch {\n      onSetFromIsOpen(false);\n      onSetIsError(true);\n      onSetErrorType(ErrorType.onCommentsLoad);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const validateForm = (data: CommentData) => {\n    const trimmedValues = {\n      name: data.name.trim(),\n      email: data.email.trim(),\n      comment: data.body.trim(),\n    };\n\n    const { name, email, comment } = trimmedValues;\n\n    if (name && email && comment) {\n      return true;\n    }\n\n    if (!name) {\n      setNameIsValid(false);\n    }\n\n    if (!email) {\n      setEmailIsValid(false);\n    }\n\n    if (!comment) {\n      setCommentIsValid(false);\n    }\n\n    return false;\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const form = event.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    const commentData = Object.fromEntries(formData.entries());\n\n    const formIsValid = validateForm(commentData as CommentData);\n\n    if (formIsValid) {\n      handleCreateComment(commentData as CommentData);\n    }\n  };\n\n  const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setNameIsValid(true);\n\n    setName(value);\n  };\n\n  const handleChangeEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setEmailIsValid(true);\n\n    setEmail(value);\n  };\n\n  const handleChangeComment = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { value } = event.target;\n\n    setCommentIsValid(true);\n\n    setComment(value);\n  };\n\n  const handleResetForm = () => {\n    clearForm();\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': !formErrorState.nameIsValid },\n            )}\n            value={formFieldsState.name}\n            onChange={handleChangeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!formErrorState.nameIsValid && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!formErrorState.nameIsValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': !formErrorState.emailIsValid },\n            )}\n            value={formFieldsState.email}\n            onChange={handleChangeEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!formErrorState.emailIsValid && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!formErrorState.emailIsValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': !formErrorState.commentIsValid },\n            )}\n            value={formFieldsState.comment}\n            onChange={handleChangeComment}\n          />\n        </div>\n\n        {!formErrorState.commentIsValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleResetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport { ErrorType } from '../types/ErrorType';\n\ntype Props = {\n  errorType: ErrorType;\n};\n\nexport const Notification: React.FC<Props> = ({ errorType }) => {\n  const ErrorNoPosts = errorType === ErrorType.noPosts;\n\n  const errorMessage = errorType === ErrorType.noPosts\n    ? 'No posts yet'\n    : 'Something went wrong!';\n\n  return (\n    <div\n      className={classNames(\n        'notification',\n        { 'is-warning': ErrorNoPosts },\n        { 'is-danger': !ErrorNoPosts },\n      )}\n      data-cy={classNames(\n        { NoPostsYet: ErrorNoPosts },\n        { PostsLoadingError: errorType === ErrorType.onPostsLoad },\n        { CommentsError: errorType === ErrorType.onCommentsLoad },\n      )}\n    >\n      {errorMessage}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Notification } from './Notification';\n\nimport { ErrorType } from '../types/ErrorType';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nimport { deleteComment, getPostComments } from '../api/comments';\n\ntype Props = {\n  errorType: ErrorType;\n  setErrorType: (errorType: ErrorType) => void;\n  selectedPost: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  errorType,\n  setErrorType,\n  selectedPost,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [formIsOpen, setFormIsOpen] = useState(false);\n\n  const { id, title, body } = selectedPost;\n\n  const handleLoadComments = async () => {\n    try {\n      setIsError(false);\n      setComments([]);\n      setIsLoading(true);\n\n      const commentsFromServer = await getPostComments(id);\n\n      setComments(commentsFromServer);\n    } catch {\n      setIsError(true);\n      setErrorType(ErrorType.onCommentsLoad);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setFormIsOpen(false);\n    handleLoadComments();\n  }, [selectedPost]);\n\n  const handleDeleteComment = async (commentId: number) => {\n    setComments(comments\n      .filter(comment => comment.id !== commentId));\n\n    try {\n      await deleteComment(commentId);\n    } catch {\n      setFormIsOpen(false);\n      setIsError(true);\n      setErrorType(ErrorType.onCommentsLoad);\n    }\n  };\n\n  const handleOpenForm = () => {\n    setFormIsOpen(true);\n  };\n\n  const handleReload = () => {\n    handleLoadComments();\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${id}: ${title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {isLoading && <Loader />}\n\n        {isError\n          ? (\n            <>\n              <Notification errorType={errorType} />\n\n              <button\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={handleReload}\n              >\n                Try again\n              </button>\n            </>\n          )\n          : (\n            <>\n              {!isLoading && !comments.length && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {!!comments.length && (\n                <p className=\"title is-4\">Comments:</p>\n              )}\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n\n              {!isLoading && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={handleOpenForm}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n      </div>\n      {formIsOpen && (\n        <NewCommentForm\n          postId={id}\n          onSetErrorType={setErrorType}\n          onSetFromIsOpen={setFormIsOpen}\n          onSetIsError={setIsError}\n          onSetComments={setComments}\n        />\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onLoadPosts: (userId: number) => Promise<void>;\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, onLoadPosts }) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const handleOpenDropdown = () => {\n    setIsActive(!isActive);\n  };\n\n  const handleLoadPosts = (userId: number) => {\n    onLoadPosts(userId);\n    setIsActive(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActive },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleOpenDropdown}\n        >\n          <span>Choose a user</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => handleLoadPosts(user.id)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Notification } from './components/Notification';\n\nimport { getUsers } from './api/users';\n\nimport { User } from './types/User';\nimport { getUserPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { ErrorType } from './types/ErrorType';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [userIsSelected, setUserIsSelected] = useState(false);\n  const [sidebarIsOpen, setSidebarIsOpen] = useState(false);\n  const [errorType, setErrorType] = useState(ErrorType.none);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const handleLoadPosts = async (userId: number) => {\n    try {\n      setSidebarIsOpen(false);\n      setSelectedPost(null);\n      setErrorType(ErrorType.none);\n      setUserPosts([]);\n      setUserIsSelected(true);\n      setIsLoading(true);\n\n      const postsFromServer = await getUserPosts(userId);\n\n      setUserPosts(postsFromServer);\n\n      if (!postsFromServer.length) {\n        setErrorType(ErrorType.noPosts);\n      }\n    } catch {\n      setErrorType(ErrorType.onPostsLoad);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOpenSidebar = (post: Post) => {\n    if (post === selectedPost) {\n      setSidebarIsOpen(false);\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSidebarIsOpen(true);\n    setSelectedPost(post);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onLoadPosts={handleLoadPosts}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!userIsSelected && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {errorType !== ErrorType.none && !sidebarIsOpen && (\n                  <Notification errorType={errorType} />\n                )}\n\n                {!!userPosts.length && (\n                  <PostsList\n                    posts={userPosts}\n                    selectedPost={selectedPost}\n                    onOpenSidebar={handleOpenSidebar}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': sidebarIsOpen },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  errorType={errorType}\n                  setErrorType={setErrorType}\n                  selectedPost={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}