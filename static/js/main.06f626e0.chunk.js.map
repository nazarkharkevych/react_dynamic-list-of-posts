{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/ErrorType.ts","api/comments.ts","customHooks/useFormFields.ts","customHooks/useFormValidate.ts","components/NewCommentForm.tsx","components/Notification.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","_ref","posts","selectedPost","onOpenSidebar","_jsxs","children","_jsx","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","ErrorType","client","createComment","deleteComment","commentId","concat","initialState","name","email","comment","reducer","state","action","_objectSpread","_defineProperty","key","value","nameIsValid","emailIsValid","commentIsValid","NewCommentForm","postId","onSetErrorType","onSetFromIsOpen","onSetIsError","onSetComments","_useFormFields","_useReducer","useReducer","_useReducer2","_slicedToArray","dispatch","setName","setEmail","setComment","clearForm","useFormFields","_useFormFields2","formFieldsState","_useFormFields2$","_useState","useState","_useState2","isLoading","setIsLoading","_useFormValidate","setNameIsValid","setEmailIsValid","setCommentIsValid","useFormValidate","_useFormValidate2","formErrorState","_useFormValidate2$","handleCreateComment","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newComment","wrap","_context","prev","next","sent","prevComments","_toConsumableArray","t0","onCommentsLoad","finish","stop","_x","apply","onSubmit","event","preventDefault","form","target","formData","FormData","commentData","Object","fromEntries","entries","trimmedName","trim","trimmedEmail","trimmedComment","validateForm","htmlFor","placeholder","onChange","Notification","errorType","ErrorNoPosts","noPosts","errorMessage","NoPostsYet","PostsLoadingError","onPostsLoad","CommentsError","PostDetails","setErrorType","comments","setComments","_useState3","_useState4","isError","setIsError","_useState5","_useState6","_useState7","_useState8","formIsOpen","setFormIsOpen","handleLoadComments","commentsFromServer","useEffect","handleDeleteComment","_ref3","_callee2","_context2","filter","_Fragment","href","UserSelector","users","onLoadPosts","isActive","setIsActive","role","user","userId","getUserPosts","App","setUsers","userPosts","setUserPosts","setSelectedPost","_useState9","_useState10","userIsSelected","setUserIsSelected","_useState11","_useState12","sidebarIsOpen","setSidebarIsOpen","_useState13","_useState14","_useState15","none","_useState16","usersFromServer","handleLoadPosts","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06f626e0.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  onOpenSidebar: (post: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  onOpenSidebar,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr\n            key={post.id}\n            data-cy=\"Post\"\n          >\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  { 'is-light': selectedPost !== post },\n                )}\n                onClick={() => onOpenSidebar(post)}\n              >\n                {selectedPost !== post\n                  ? 'Open'\n                  : 'Close'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorType {\n  none,\n  noPosts,\n  onPostsLoad,\n  onCommentsLoad,\n}\n","import { Comment, CommentPostData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: CommentPostData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import { useReducer } from 'react';\n\ntype Action = {\n  type: 'updated_input';\n  key: 'name' | 'email' | 'comment';\n  value: string;\n} | {\n  type: 'cleared_form'\n};\n\ntype State = {\n  name: string;\n  email: string;\n  comment: string;\n};\n\ntype Handlers = {\n  setName: (value: string) => void;\n  setEmail: (value: string) => void;\n  setComment: (value: string) => void;\n  clearForm: () => void;\n};\n\nconst initialState = {\n  name: '',\n  email: '',\n  comment: '',\n};\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'updated_input':\n      return {\n        ...state,\n        [action.key]: action.value,\n      };\n\n    case 'cleared_form':\n      return {\n        ...initialState,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useFormFields = (): [State, Handlers] => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const setName = (value: string) => {\n    dispatch({\n      type: 'updated_input',\n      key: 'name',\n      value,\n    });\n  };\n\n  const setEmail = (value: string) => {\n    dispatch({\n      type: 'updated_input',\n      key: 'email',\n      value,\n    });\n  };\n\n  const setComment = (value: string) => {\n    dispatch({\n      type: 'updated_input',\n      key: 'comment',\n      value,\n    });\n  };\n\n  const clearForm = () => {\n    dispatch({\n      type: 'cleared_form',\n    });\n  };\n\n  return [state, {\n    setName,\n    setEmail,\n    setComment,\n    clearForm,\n  }];\n};\n","import { useReducer } from 'react';\n\ntype Action = {\n  type: 'created_error';\n  key: 'nameIsValid' | 'emailIsValid' | 'commentIsValid';\n  value: boolean;\n};\n\ntype State = {\n  nameIsValid: boolean;\n  emailIsValid: boolean;\n  commentIsValid: boolean;\n};\n\ntype Handlers = {\n  setNameIsValid: (value: boolean) => void;\n  setEmailIsValid: (value: boolean) => void;\n  setCommentIsValid: (value: boolean) => void;\n};\n\nconst initialState = {\n  nameIsValid: true,\n  emailIsValid: true,\n  commentIsValid: true,\n};\n\nconst reducer = (state: State, action: Action) => {\n  const { type, key, value } = action;\n\n  switch (type) {\n    case 'created_error':\n      return {\n        ...state,\n        [key]: value,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useFormValidate = (): [State, Handlers] => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const setNameIsValid = (value: boolean) => {\n    dispatch({\n      type: 'created_error',\n      key: 'nameIsValid',\n      value,\n    });\n  };\n\n  const setEmailIsValid = (value: boolean) => {\n    dispatch({\n      type: 'created_error',\n      key: 'emailIsValid',\n      value,\n    });\n  };\n\n  const setCommentIsValid = (value: boolean) => {\n    dispatch({\n      type: 'created_error',\n      key: 'commentIsValid',\n      value,\n    });\n  };\n\n  return [state, { setNameIsValid, setEmailIsValid, setCommentIsValid }];\n};\n","import React, {\n  useState,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport classNames from 'classnames';\n\nimport { Comment, CommentData } from '../types/Comment';\nimport { createComment } from '../api/comments';\nimport { ErrorType } from '../types/ErrorType';\n\nimport { useFormFields } from '../customHooks/useFormFields';\nimport { useFormValidate } from '../customHooks/useFormValidate';\n\ntype Props = {\n  postId: number;\n  onSetErrorType: (errorType: ErrorType) => void;\n  onSetFromIsOpen: (value: boolean) => void;\n  onSetIsError: (value: boolean) => void;\n  onSetComments: Dispatch<SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  onSetErrorType,\n  onSetFromIsOpen,\n  onSetIsError,\n  onSetComments,\n}) => {\n  const [formFieldsState, {\n    setName,\n    setEmail,\n    setComment,\n    clearForm,\n  }] = useFormFields();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [formErrorState, {\n    setNameIsValid,\n    setEmailIsValid,\n    setCommentIsValid,\n  }] = useFormValidate();\n\n  const handleCreateComment = async (data: CommentData) => {\n    const newComment = {\n      postId,\n      ...data,\n    };\n\n    try {\n      setIsLoading(true);\n\n      const comment = await createComment(newComment);\n\n      setComment('');\n\n      onSetComments((prevComments) => ([\n        ...prevComments,\n        comment,\n      ]));\n    } catch {\n      onSetFromIsOpen(false);\n\n      onSetIsError(true);\n\n      onSetErrorType(ErrorType.onCommentsLoad);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const validateForm = (data: CommentData) => {\n    const { name, email, body } = data;\n\n    const trimmedName = name.trim();\n    const trimmedEmail = email.trim();\n    const trimmedComment = body.trim();\n\n    if (trimmedName && trimmedEmail && trimmedComment) {\n      return true;\n    }\n\n    if (!trimmedName) {\n      setNameIsValid(false);\n    }\n\n    if (!trimmedEmail) {\n      setEmailIsValid(false);\n    }\n\n    if (!trimmedComment) {\n      setCommentIsValid(false);\n    }\n\n    return false;\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const form = event.target as HTMLFormElement;\n    const formData = new FormData(form);\n\n    const commentData = Object.fromEntries(formData.entries());\n\n    const formIsValid = validateForm(commentData as CommentData);\n\n    if (formIsValid) {\n      handleCreateComment(commentData as CommentData);\n    }\n  };\n\n  const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setNameIsValid(true);\n\n    setName(value);\n  };\n\n  const handleChangeEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setEmailIsValid(true);\n\n    setEmail(value);\n  };\n\n  const handleChangeComment = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { value } = event.target;\n\n    setCommentIsValid(true);\n\n    setComment(value);\n  };\n\n  const handleResetForm = () => {\n    clearForm();\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': !formErrorState.nameIsValid },\n            )}\n            value={formFieldsState.name}\n            onChange={handleChangeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!formErrorState.nameIsValid && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!formErrorState.nameIsValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': !formErrorState.emailIsValid },\n            )}\n            value={formFieldsState.email}\n            onChange={handleChangeEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!formErrorState.emailIsValid && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!formErrorState.emailIsValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': !formErrorState.commentIsValid },\n            )}\n            value={formFieldsState.comment}\n            onChange={handleChangeComment}\n          />\n        </div>\n\n        {!formErrorState.commentIsValid && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleResetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport { ErrorType } from '../types/ErrorType';\n\ntype Props = {\n  errorType: ErrorType;\n};\n\nexport const Notification: React.FC<Props> = ({ errorType }) => {\n  const ErrorNoPosts = errorType === ErrorType.noPosts;\n\n  const errorMessage = errorType === ErrorType.noPosts\n    ? 'No posts yet'\n    : 'Something went wrong!';\n\n  return (\n    <div\n      className={classNames(\n        'notification',\n        { 'is-warning': ErrorNoPosts },\n        { 'is-danger': !ErrorNoPosts },\n      )}\n      data-cy={classNames(\n        { NoPostsYet: ErrorNoPosts },\n        { PostsLoadingError: errorType === ErrorType.onPostsLoad },\n        { CommentsError: errorType === ErrorType.onCommentsLoad },\n      )}\n    >\n      {errorMessage}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Notification } from './Notification';\n\nimport { ErrorType } from '../types/ErrorType';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nimport { deleteComment, getPostComments } from '../api/comments';\n\ntype Props = {\n  errorType: ErrorType;\n  setErrorType: (errorType: ErrorType) => void;\n  selectedPost: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  errorType,\n  setErrorType,\n  selectedPost,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [formIsOpen, setFormIsOpen] = useState(false);\n\n  const { id, title, body } = selectedPost;\n\n  const handleLoadComments = async () => {\n    try {\n      setIsError(false);\n\n      setComments([]);\n\n      setIsLoading(true);\n\n      const commentsFromServer = await getPostComments(id);\n\n      setComments(commentsFromServer);\n    } catch {\n      setIsError(true);\n\n      setErrorType(ErrorType.onCommentsLoad);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setFormIsOpen(false);\n\n    handleLoadComments();\n  }, [selectedPost]);\n\n  const handleDeleteComment = async (commentId: number) => {\n    setComments(comments\n      .filter(comment => comment.id !== commentId));\n\n    try {\n      await deleteComment(commentId);\n    } catch {\n      setIsError(true);\n\n      setErrorType(ErrorType.onCommentsLoad);\n    }\n  };\n\n  const handleOpenForm = () => {\n    setFormIsOpen(true);\n  };\n\n  const handleReload = () => {\n    handleLoadComments();\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${id}: ${title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {isLoading && <Loader />}\n\n        {isError\n          ? (\n            <>\n              <Notification errorType={errorType} />\n\n              <button\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={handleReload}\n              >\n                Try again\n              </button>\n            </>\n          )\n          : (\n            <>\n              {!isLoading && !comments.length && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {!!comments.length && (\n                <p className=\"title is-4\">Comments:</p>\n              )}\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n\n              {!isLoading && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={handleOpenForm}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n      </div>\n      {formIsOpen && (\n        <NewCommentForm\n          postId={id}\n          onSetErrorType={setErrorType}\n          onSetFromIsOpen={setFormIsOpen}\n          onSetIsError={setIsError}\n          onSetComments={setComments}\n        />\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onLoadPosts: (userId: number) => Promise<void>;\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, onLoadPosts }) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const handleOpenDropdown = () => {\n    setIsActive(!isActive);\n  };\n\n  const handleLoadPosts = (userId: number) => {\n    onLoadPosts(userId);\n\n    setIsActive(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActive },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleOpenDropdown}\n        >\n          <span>Choose a user</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => handleLoadPosts(user.id)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Notification } from './components/Notification';\n\nimport { getUsers } from './api/users';\n\nimport { User } from './types/User';\nimport { getUserPosts } from './api/posts';\nimport { Post } from './types/Post';\nimport { ErrorType } from './types/ErrorType';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [userIsSelected, setUserIsSelected] = useState(false);\n  const [sidebarIsOpen, setSidebarIsOpen] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [errorType, setErrorType] = useState(ErrorType.none);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const handleLoadPosts = async (userId: number) => {\n    try {\n      setIsError(false);\n\n      setSidebarIsOpen(false);\n\n      setSelectedPost(null);\n\n      setErrorType(ErrorType.none);\n\n      setUserPosts([]);\n\n      setUserIsSelected(true);\n\n      setIsLoading(true);\n\n      const postsFromServer = await getUserPosts(userId);\n\n      setUserPosts(postsFromServer);\n\n      if (!postsFromServer.length) {\n        setIsError(true);\n\n        setErrorType(ErrorType.noPosts);\n      }\n    } catch {\n      setIsError(true);\n\n      setErrorType(ErrorType.onPostsLoad);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOpenSidebar = (post: Post) => {\n    if (post === selectedPost) {\n      setSidebarIsOpen(false);\n\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSidebarIsOpen(true);\n\n    setSelectedPost(post);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onLoadPosts={handleLoadPosts}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!userIsSelected && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isError && (\n                  <Notification errorType={errorType} />\n                )}\n\n                {!!userPosts.length && (\n                  <PostsList\n                    posts={userPosts}\n                    selectedPost={selectedPost}\n                    onOpenSidebar={handleOpenSidebar}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': sidebarIsOpen },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  errorType={errorType}\n                  setErrorType={setErrorType}\n                  selectedPost={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}